#!/usr/bin/env python3

import json
import sys

from attack.attack import is_attackable
from attack.situation import Situation, Species
from attack.trait import trait_name_to_class


"""
----------------
DATA DEFINITIONS
----------------

A Situation is [JSONSpecies, JSONSpecies, OptJSONSpecies, OptJSONSpecies].

A JSONSpecies is
    [["food",Nat],
     ["body",Nat],
     ["population",Nat],
     ["traits",LOT]]

A LOT is one of:
    []
    [JSONTrait]
    [JSONTrait, JSONTrait]
    [JSONTrait, JSONTrait, JSONTrait]

An OptJSONSpecies is one of:
    false
    Species

A JSONTrait is one of:
    "carnivore", "ambush", "burrowing", "climbing", "cooperation",
    "fat-tissue", "fertile", "foraging", "hard-shell", "herding",
    "horns", "long-neck", "pack-hunting", "scavenger", "symbiosis", or
    "warning-call".

A Nat is a JSON number interpretable as a natural number between 0 and 7
(inclusive).
"""


def json_is_attackable(json_situation):
    """determines whether the situation in the string is attackable

    :param situation: string situation
    :type situation: JSON

    :returns: whether the situation is valid and attacker can attack
    :rtype: bool
    """

    [attacker, defender, left, right] = convert_situation(json_situation)
    return is_attackable(attacker, defender, left, right)


def convert_situation(json_situation):
    """converts a Situation to list of Species

    :param json_situation: JSON representation of a situation
    :type json_situation: list

    :returns: situation
    :rtype: list of Species
    """

    return [convert_species(species) for species in json_situation]


def convert_species(json_species):
    """converts a JSONSpecies to a Species

    :param json_species: JSON representation of species
    :type json_species: JSONSpecies

    :returns: internal representation of species
    :rtype: Species
    """

    if json_species is False:
        return None

    [[_, food], [_, body], [_, population], [_, traits]] = json_species
    converted_traits = [convert_trait(t) for t in traits]

    return Species(food, body, population, converted_traits)


def convert_trait(json_trait):
    """
    :param json_trait: JSON representation of trait
    :type json_trait: JSONTrait

    :returns: internal representation of trat
    :rtype: Trait
    """

    default_tokens = 0
    TraitClass = trait_name_to_class[json_trait]

    return TraitClass(default_tokens)


def main():

    json_situation = json.load(sys.stdin)

    try:
        response = json_is_attackable(json_situation)
        print(json.dumps(response))
    except ValueError:
        pass


if __name__ == '__main__':
    main()
